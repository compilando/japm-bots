services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: packages/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  orchestrator:
    build:
      context: .
      dockerfile: packages/orchestrator/Dockerfile
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  webhook-manager:
    build:
      context: .
      dockerfile: packages/webhook-manager/Dockerfile
    ports:
      - "4000:4000"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  workers:
    build:
      context: .
      dockerfile: packages/workers/Dockerfile
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 3

  mock-webhook:
    build:
      context: .
      dockerfile: packages/mock-webhook/Dockerfile
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data: 
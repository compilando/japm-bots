services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      com.docker.compose.service: "redis"
      logging: "true"

  api-gateway:
    build:
      context: .
      dockerfile: packages/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "api-gateway"
      logging: "true"

  orchestrator:
    build:
      context: .
      dockerfile: packages/orchestrator/Dockerfile
    ports:
      - "3002:3002"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
      ORCHESTRATOR_PORT: 3002
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "orchestrator"
      logging: "true"

  webhook-manager:
    build:
      context: .
      dockerfile: packages/webhook-manager/Dockerfile
    ports:
      - "4000:4000"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "webhook-manager"
      logging: "true"

  workers-1:
    build:
      context: .
      dockerfile: packages/workers/Dockerfile
    ports:
      - "3003:3003"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
      WORKERS_PORT: 3003
      HOSTNAME: workers-1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "workers-1"
      logging: "true"

  workers-2:
    build:
      context: .
      dockerfile: packages/workers/Dockerfile
    ports:
      - "3004:3003"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
      WORKERS_PORT: 3003
      HOSTNAME: workers-2
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "workers-2"
      logging: "true"

  workers-3:
    build:
      context: .
      dockerfile: packages/workers/Dockerfile
    ports:
      - "3005:3003"
    environment:
      REDIS_HOST: redis
      NODE_ENV: production
      WORKERS_PORT: 3003
      HOSTNAME: workers-3
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "workers-3"
      logging: "true"

  mock-webhook:
    build:
      context: .
      dockerfile: packages/mock-webhook/Dockerfile
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
    restart: unless-stopped
    labels:
      com.docker.compose.service: "mock-webhook"
      logging: "true"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    labels:
      com.docker.compose.service: "prometheus"
      logging: "true"

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki-data:/tmp/loki
    command: 
      - -config.file=/etc/loki/local-config.yaml
      - -target=all
    user: "0"
    environment:
      - LOKI_LOCAL_CONFIG=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      com.docker.compose.service: "loki"
      logging: "true"

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./alloy:/etc/alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: run /etc/alloy/config.alloy --server.http.listen-addr=0.0.0.0:12345 --storage.path=/tmp/alloy
    ports:
      - "12345:12345"
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "alloy"
      logging: "false"

  grafana:
    image: grafana/grafana:10.4.1
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: ""
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: ""
      GF_LOG_LEVEL: info
      GF_PLUGINS_ENABLE_ALPHA: false
      GF_FEATURE_TOGGLES_ENABLE: ""
      GF_AUTO_ASSIGN_ORG_ROLE: Viewer
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    labels:
      com.docker.compose.service: "grafana"
      logging: "true"

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  loki-data: